<?php

/**
 * Implementation of hook_perm()
 */
function pdf_slideshow_perm() {
	return array('administer pdf slideshow');
}

/**
 * Implementation of hook_menu()
 */
function pdf_slideshow_menu($may_cache) {
	$items = array();
	if ($may_cache) {
		$items[] = array(
	      'path' => 'admin/settings/pdfslideshow',
	      'title' => t('PDF Slideshow'),
	      'description' => t('Configure PDF Slideshow settings.'),
	      'callback' => 'drupal_get_form',
	      'callback arguments' => array('pdf_slideshow_admin_settings'),
	      'access' => user_access('administer pdf slideshow'),
	      'type' => MENU_NORMAL_ITEM,
	    );
	}
	else {
		$nid = arg(1);
		$fid = arg(3);
		if (is_numeric($nid) && is_numeric($fid) && $node = node_load($nid)) {
			if ($file = $node->files[$fid]) {
				$items[] = array(
				  'path' => 'node/'. $node->nid.'/file/'.$fid.'/show', 
				  'title' => t('View'),
		          'callback' => 'node_pdf_slideshow',
		          'callback arguments' => array(arg(1), arg(3)),
		          'access' => node_access('view', $node),
		          'type' => MENU_CALLBACK
				);
			}
		} 
			
	}
	return $items;
}

function _convert_pdf_to_images($file, $nid) {
	$dest_path = file_create_path(file_directory_path());
	$dest = realpath($dest_path);
	$dest .= '/slideshow/'.$nid.'/'.$file->fid;
	if (file_check_directory($dest, FILE_CREATE_DIRECTORY)) {
		$source = realpath($file->filepath);
		$target = $dest.'/'.str_replace('pdf', 'jpg', $file->filename);
		$convert = variable_get('imagemagick_path', exec('/usr/bin/which convert'));
		var_dump("$convert $source $target");
		var_dump(shell_exec("$convert $source $target"));
		die;
	}

}

function node_pdf_slideshow($nid, $fid) {
	if (is_numeric($nid) && $node = node_load($nid)) {
		if ($file = $node->files[$fid]) {
			if ($file->filemime == 'application/pdf') {
				_convert_pdf_to_images($file, $nid);
			}
		}
	} 
}

function pdf_slideshow_admin_settings() {
	$form['general'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('General settings'),
	    '#collapsible' => TRUE,
	    '#collapsed' => FALSE,
	  );
	$form['general']['imagemagick_path'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Imagemagick path'),
	    '#size' => 50,
	    '#default_value' => variable_get('imagemagick_path', exec('/usr/bin/which convert')),
	    '#description' => t('Path to imagemagick.'),
	  );
	return system_settings_form($form);
}

function phptemplate_upload_attachments($files) {
  $node = node_load(arg(1));
  $header = array(t('Attachment'), t('Size'));
  $rows = array();
  foreach ($files as $file) {
    $file = (object)$file;
    if ($file->list && !$file->remove) {
      // Generate valid URL for both existing attachments and preview of new attachments (these have 'upload' in fid)
      $href = file_create_url((strpos($file->fid, 'upload') === FALSE ? $file->filepath : file_create_filename($file->filename, file_create_path())));
      $text = $file->description ? $file->description : $file->filename;
      $rows[] = array(l($text, $href), format_size($file->filesize), l(t('View'), 'node/'.$node->nid.'/file/'.$file->fid.'/show'));
    }
  }
  if (count($rows)) {
    return theme('table', $header, $rows, array('id' => 'attachments'));
  }
}


?>
